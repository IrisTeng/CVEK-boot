testing <- function(formula_int, label_names, Y, X1, X2, Kernlist, 
                    mode = "loocv", strategy = "erm", beta = 1,
                    test = "boot", lambda = exp(seq(-5, 5)), B = 100){
  
  re <- genericFormula(formula_int, label_names)
  generic_formula0 <- re$generic_formula
  len <- re$length_main
  X <- model.matrix(generic_formula0, data)[, -1]
  X12 <- X[, c((len + 1):dim(X)[2])]
  n <- length(Y)
  
  result <- ensemble(Y, X1, X2, Kernlist, mode, strategy, beta, lambda)
  lam <- result[[1]]
  beta0 <- result[[2]]
  alpha0 <- result[[3]]
  K_gpr <- result[[4]]
  # u_weight <- result[[5]]
  sigma2_hat <- noiseEstimate(Y, lam, beta0, alpha0, K_gpr)
  tau_hat <- sigma2_hat / lam
  
  if (test == "boot"){
    # conduct bootstrap
    meanY <- K_gpr %*% alpha0 + beta0
    bs_test <- sapply(1:B, function(k){
      Ystar <- meanY + rnorm(n, sd = sqrt(sigma2_hat))
      scoreStat(n, Ystar, X12, beta0, sigma2_hat, tau_hat, K_gpr)
    })
    
    # assemble test statistic
    original_test <-
      scoreStat(n, Y, X12, beta0, sigma2_hat, tau_hat, K_gpr)
    
    pvalue <- sum(as.numeric(original_test) <= bs_test) / B
  }
  else if (test == "asym"){
    score_chi <-
      scoreStat(n, Y, X12, beta0, sigma2_hat, tau_hat, K_gpr)
    
    K0 <- K_gpr
    K12 <- X12 %*% t(X12)
    V0_inv <- ginv(tau_hat * K0 + sigma2_hat * diag(n))
    one <- rep(1, n)
    P0_mat <- V0_inv - V0_inv %*%
      one %*% ginv(t(one) %*% V0_inv %*% one) %*% t(one) %*% V0_inv
    
    drV0_tau <- K0
    drV0_sigma2 <- diag(n)
    drV0_del <- tau_hat * K12
    
    I0 <- infoMat(P0_mat,
                  mat_del = drV0_del, mat_sigma2 = drV0_sigma2,
                  mat_tau = drV0_tau)
    
    #Effective Info for delta
    tot_dim <- ncol(I0)
    I_deldel <-
      I0[1, 1] -
      I0[1, 2:tot_dim] %*% ginv(I0[2:tot_dim, 2:tot_dim]) %*% I0[2:tot_dim, 1]

    md <- tau_hat * tr(K12 %*% P0_mat) / 2
    
    m_chi <- I_deldel / (2 * md)
    d_chi <- md / m_chi
    
    pvalue <- 1 - pchisq(score_chi / m_chi, d_chi)
  }
  else
    stop("test must be boot or asym!")
  
  return(pvalue)
}