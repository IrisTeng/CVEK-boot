test_that("length of output", {
expect_length(sol$lam, 1)
expect_length(sol$intercept, 1)
expect_length(sol$alpha, n)
expect_length(sol$K[1], n)
expect_length(sol$u_hat, length(fit$kern_list))
})
test_that("length of output", {
expect_length(sol$lam, 1)
expect_length(sol$intercept, 1)
expect_length(sol$alpha, n)
expect_length((sol$K)[1], n)
expect_length(sol$u_hat, length(fit$kern_list))
})
test_that("length of output", {
expect_length(sol$lam, 1)
expect_length(sol$intercept, 1)
expect_length(sol$alpha, n)
expect_length(nrow(sol$K), n)
expect_length(sol$u_hat, length(fit$kern_list))
})
sol$K
nrow(sol$K)
n
test_that("length of output", {
expect_length(sol$lam, 1)
expect_length(sol$intercept, 1)
expect_length(sol$alpha, n)
expect_length(nrow(sol$K), n)
expect_length(sol$u_hat, length(fit$kern_list))
})
test_that("warning message from tuning", {
kern <- kern_list[[1]]
K1_m <- kern(fit$X1, fit$X1)
K2_m <- kern(fit$X2, fit$X2)
K <- (K1_m + K2_m) / tr(K1_m + K2_m)
expect_warning(tuning(fit$Y, K, mode, lambda = rep(.5, 11)),
"the smallest one")
})
test_that("length of output", {
expect_length(sol$lam, 1)
expect_length(sol$intercept, 1)
expect_length(sol$alpha, n)
expect_equal(nrow(sol$K), n)
expect_length(sol$u_hat, length(fit$kern_list))
})
test_that("length of output", {
expect_length(sol$lam, 1)
expect_length(sol$intercept, 1)
expect_length(sol$alpha, n)
expect_equal(nrow(sol$K), n)
expect_length(sol$u_hat, length(fit$kern_list))
})
test_that("range of output", {
formula_int <- Y ~ X1 * X2
test <- "boot"
B <- 100
pvalue <- testing(formula_int, label_names, fit$Y, fit$X1, fit$X2, fit$kern_list,
mode, strategy, beta = 1, test, lambda, B)
expect_lte(pvalue, 1)
expect_gte(pvalue, 0)
})
lambda = rep(.5, 11)
pvalue <- testing(formula_int, label_names, fit$Y, fit$X1, fit$X2, fit$kern_list,
mode, strategy, beta = 1, test, lambda, B)
pvalue
test_that("warning message from tuning", {
lambda = rep(.5, 11)
expect_warning(testing(formula_int, label_names, fit$Y, fit$X1, fit$X2, fit$kern_list,
mode, strategy, beta = 1, test, lambda, B),
"the smallest one")
})
test()
test()
test()
test()
16.8*1.6
setwd('/Users/dorabeedeng/Desktop/dd')
# generate command setting table
setting_total1 <-
expand.grid(n = 100,
method = c("polynomial"),
p = 1:3,
int_effect = c(seq(0, .29, .05), seq(.3, 1, .1)),
mode = c("AICc", "GCVc", "gmpml", "loocv"),
strategy = c("avg", "exp", "erm"),
beta = "min",
d = 1)
setting_total1$l <- setting_total1$p / 2
setting_total1 <- setting_total1[, c(1:3, 9, 4:8)]
setting_total <- setting_total1
write.table(setting_total, "settings.txt",
sep = ",", row.names = FALSE)
# remove previous bash script
file_handle <- "command_exec"
file_names <-
grep(file_handle, list.files(), value = TRUE)
file_names_bkp <-
paste0("./", file_names)
for (name in c(file_names, file_names_bkp)){
file.remove(name)
}
# generate cluster bash script
n_run_per_worker <- 1
n_exec <-
ceiling(nrow(setting_total) / (n_run_per_worker * 1e3))
cluster_type <- c("SLURM", "LSF")[1]
for (exec_id in 1:n_exec) {
n_rask_rest <-
min(nrow(setting_total)/n_run_per_worker -
(exec_id-1)*1e3, 1e3)
if (cluster_type == "SLURM"){
string <-
paste0(
"#!/bin/bash
#SBATCH --array=", (exec_id-1) * 1e3 + 1,
"-", (exec_id-1) * 1e3 + n_rask_rest,
"	    		#job array list goes 1,2,3...n
#SBATCH -c 1
#SBATCH -N 1
#SBATCH -t 0-12:00			#job run 12 hour
#SBATCH -p short			#submit to 'short' queue
#SBATCH --mem=6370  		# use 4 GB memory
#SBATCH -e wd45_%j.err
#SBATCH --mail-type=END      #Type of email notification
#SBATCH --mail-user=wdeng@hsph.harvard.edu
Rscript './simMaster.R' ${SLURM_ARRAY_TASK_ID}"
)
} else if (cluster_type == "LSF"){
string <-
paste0(
"#!/bin/bash
#BSUB -q short					#submit to 'short' queue
#BSUB -n 1						#each  job run on 1 core
#BSUB -W 12:00					#job run 12 hour
#BSUB -J jobArray[", (exec_id-1) * 1e3 + 1,
"-", (exec_id-1) * 1e3 + n_rask_rest,
"]		#job array list goes 1,2,3...n
#BSUB -o './log/out_%I.txt' 			#lsf output file
#BSUB -e './log/err_%I.txt' 			#lsf error file
#BSUB -R 'rusage[mem=4096]'		#use 4GB memory
Rscript './simMaster.R' $LSB_JOBINDEX"
)
}
write(string, file = paste0("command_exec", exec_id, ".sh"))
write(string, file = paste0("./command_exec", exec_id, ".sh"))
}
# generate command setting table
setting_total1 <-
expand.grid(n = 100,
method = c("polynomial", "rbf"),
p = 1:3,
int_effect = c(seq(0, .29, .05), seq(.3, 1, .1)),
mode = c("AICc", "GCVc", "gmpml", "loocv"),
strategy = c("avg", "exp", "erm"),
beta = "min",
d = 1)
setting_total1$l <- setting_total1$p / 2
setting_total1 <- setting_total1[, c(1:3, 9, 4:8)]
setting_total2 <-
expand.grid(n = 100,
method = c("matern"),
p = 1:2, l = c(.5, 1, 1.5),
int_effect = c(seq(0, .29, .05), seq(.3, 1, .1)),
mode = c("AICc", "GCVc", "gmpml", "loocv"),
strategy = c("avg", "exp", "erm"),
beta = "min",
d = 1)
setting_total <- rbind(setting_total1, setting_total2)
write.table(setting_total, "settings.txt",
sep = ",", row.names = FALSE)
# generate command setting table
setting_total1 <-
expand.grid(n = 100,
method = c("rbf"),
p = 1:3,
int_effect = c(seq(0, .29, .05), seq(.3, 1, .1)),
mode = c("AICc", "GCVc", "gmpml", "loocv"),
strategy = c("avg", "exp", "erm"),
beta = "min",
d = 1)
setting_total1$l <- setting_total1$p / 2
setting_total1 <- setting_total1[, c(1:3, 9, 4:8)]
setting_total2 <-
expand.grid(n = 100,
method = c("matern"),
p = 1:2, l = c(.5, 1, 1.5),
int_effect = c(seq(0, .29, .05), seq(.3, 1, .1)),
mode = c("AICc", "GCVc", "gmpml", "loocv"),
strategy = c("avg", "exp", "erm"),
beta = "min",
d = 1)
setting_total <- rbind(setting_total1, setting_total2)
write.table(setting_total, "settings.txt",
sep = ",", row.names = FALSE)
# generate cluster bash script
n_run_per_worker <- 1
n_exec <-
ceiling(nrow(setting_total) / (n_run_per_worker * 1e3))
cluster_type <- c("SLURM", "LSF")[1]
for (exec_id in 1:n_exec) {
n_rask_rest <-
min(nrow(setting_total)/n_run_per_worker -
(exec_id-1)*1e3, 1e3)
if (cluster_type == "SLURM"){
string <-
paste0(
"#!/bin/bash
#SBATCH --array=", (exec_id-1) * 1e3 + 1,
"-", (exec_id-1) * 1e3 + n_rask_rest,
"	    		#job array list goes 1,2,3...n
#SBATCH -c 1
#SBATCH -N 1
#SBATCH -t 0-12:00			#job run 12 hour
#SBATCH -p short			#submit to 'short' queue
#SBATCH --mem=6370  		# use 4 GB memory
#SBATCH -e wd45_%j.err
#SBATCH --mail-type=END      #Type of email notification
#SBATCH --mail-user=wdeng@hsph.harvard.edu
Rscript './simMaster.R' ${SLURM_ARRAY_TASK_ID}"
)
} else if (cluster_type == "LSF"){
string <-
paste0(
"#!/bin/bash
#BSUB -q short					#submit to 'short' queue
#BSUB -n 1						#each  job run on 1 core
#BSUB -W 12:00					#job run 12 hour
#BSUB -J jobArray[", (exec_id-1) * 1e3 + 1,
"-", (exec_id-1) * 1e3 + n_rask_rest,
"]		#job array list goes 1,2,3...n
#BSUB -o './log/out_%I.txt' 			#lsf output file
#BSUB -e './log/err_%I.txt' 			#lsf error file
#BSUB -R 'rusage[mem=4096]'		#use 4GB memory
Rscript './simMaster.R' $LSB_JOBINDEX"
)
}
write(string, file = paste0("command_exec", exec_id, ".sh"))
write(string, file = paste0("./command_exec", exec_id, ".sh"))
}
# plot
setwd('/Users/dorabeedeng/Desktop')
library(ggplot2)
library(dplyr)
file <- read.table("sim_power_boot.txt", header = F)
View(file)
file <- file[, -c(7, 8)]
file <- read.table("sim_power_boot.txt", header = F)
file <- file[, -c(7, 8)]
colnames(file) <- c("method", "p", "l", "int_effect", "mode", "strategy", "d",
"power", "lam_mean", "K_tr", "A_tr",
"train_RMSE", "test_RMSE", "trtst_ratio")
View(file)
file3 <- filter(file, method != 'matern')
file4 <- filter(file, method == 'matern')
file4$method <- ifelse(file4$method == 'matern' & file4$p == 1, 'matern_1.5',
'matern_2.5')
file <- rbind(file3, file4)
d=1
file$l <- as.factor(file$l)
file$d <- as.factor(file$d)
file$method <- factor(file$method, order = T,
levels = c('polynomial', 'rbf', 'matern_1.5', 'matern_2.5'))
file$strategy <- factor(file$strategy, order = T, levels = c("avg", "exp", "erm"))
fig <- ggplot(data = file, aes(x = int_effect, y = power, linetype = strategy, color = mode))+
geom_point(size = 0.6) + geom_line() +
scale_shape_manual(values = seq(0, 8)) +
scale_linetype_manual(values=c("solid", "longdash", "dotted")) +
geom_hline(yintercept = 0.05) + facet_grid(l ~ method)+
labs(x = 'interaction', y = 'probability') +
theme_set(theme_bw()) + theme(panel.grid = element_blank()) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12), panel.grid =element_blank()) +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
ggsave(paste0("library_", d, "_power.pdf"),
fig, width = 14, height = 9)
fig <- ggplot(data = file, aes(x = int_effect, y = power, linetype = strategy, color = mode))+
geom_point(size = 0.6) + geom_line() +
scale_shape_manual(values = seq(0, 8)) +
scale_linetype_manual(values=c("solid", "longdash", "dotted")) +
geom_hline(yintercept = 0.05) + facet_grid(l ~ method)+
labs(x = 'interaction', y = 'probability') +
theme_set(theme_bw()) + theme(panel.grid = element_blank()) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12), panel.grid =element_blank()) +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
ggsave(paste0("library_", d, "_power.pdf"),
fig, width = 14, height = 9)
fig <- ggplot(data = file, aes(x = int_effect, y = lam_mean, linetype = strategy, color = mode))+
geom_point(size = 0.6) + geom_line() +
scale_shape_manual(values = seq(0, 8)) +
scale_linetype_manual(values=c("solid", "longdash", "dotted")) +
facet_grid(l ~ method)+
labs(x = 'interaction', y = 'lambda') +
theme_set(theme_bw()) + theme(panel.grid = element_blank()) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12), panel.grid =element_blank()) +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
ggsave(paste0("library_", d, "_lambda.pdf"),
fig, width = 14, height = 9)
file$lam_mean <- log(file$lam_mean)
fig <- ggplot(data = file, aes(x = int_effect, y = lam_mean, linetype = strategy, color = mode))+
geom_point(size = 0.6) + geom_line() +
scale_shape_manual(values = seq(0, 8)) +
scale_linetype_manual(values=c("solid", "longdash", "dotted")) +
facet_grid(l ~ method)+
labs(x = 'interaction', y = 'lambda') +
theme_set(theme_bw()) + theme(panel.grid = element_blank()) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
plot.title = element_text(size = 16), axis.text.x=element_text(size = 12),
axis.text.y=element_text(size = 12), panel.grid =element_blank()) +
theme(legend.title = element_text(size = 12, face = "bold")) +
theme(legend.text = element_text(size = 12))
ggsave(paste0("library_", d, "_lambda.pdf"),
fig, width = 14, height = 9)
library("devtools")
install_github("IrisTeng/CVEK")
library(CVEK)
label_names <- list(X1 = c("x1", "x2"), X2 = c("x3", "x4"))
formula <- Y ~ X1 + X2
formula_int <- Y ~ X1 * X2
method <- "polynomial"
int_effect <- 0
eps <- .01
beta <- "min"
test <- "boot"
lambda <- exp(seq(-5, 5, .2))
B <- 100
for (p in 1:3) {
l <- p / 2
kern <- data.frame(method = method, Sigma = 0, l = l, p = p)
kern$method <- as.character(kern$method)
data_all <- generate_data(200, label_names, method = method,
int_effect = int_effect, l = l,
p = p, eps = eps)
data_train <- data_all[1:100, ]
data_test <- data_all[101:200, ]
fit <- define_model(formula, label_names, data_train, kern)
fit_test <- define_model(formula, label_names, data_test, kern)
for (mode in c("AICc", "GCVc", "gmpml", "loocv")) {
for (strategy in c("avg", "exp", "erm")) {
res_tst <-
testing(formula_int, label_names,
fit$Y, fit$X1, fit$X2,
fit$kern_list, mode, strategy,
beta, test, lambda, B, data_test, fit_test)
msg <- paste0("true=", method, ", p=", p, ", mode=", mode, ", strategy=", strategy)
output <- paste0("selected lambda=", res_tst$lam, ", train_RMSE=", res_tst$train_RMSE,
", test_RMSE=", res_tst$test_RMSE)
print(msg, output)
}
}
}
msg <- paste0("dd", "d")
output <- paste0("dss", "t")
print(msg, output)
print(msg)
for (p in 1:3) {
l <- p / 2
kern <- data.frame(method = method, Sigma = 0, l = l, p = p)
kern$method <- as.character(kern$method)
data_all <- generate_data(200, label_names, method = method,
int_effect = int_effect, l = l,
p = p, eps = eps)
data_train <- data_all[1:100, ]
data_test <- data_all[101:200, ]
fit <- define_model(formula, label_names, data_train, kern)
fit_test <- define_model(formula, label_names, data_test, kern)
for (mode in c("AICc", "GCVc", "gmpml", "loocv")) {
for (strategy in c("avg", "exp", "erm")) {
res_tst <-
testing(formula_int, label_names,
fit$Y, fit$X1, fit$X2,
fit$kern_list, mode, strategy,
beta, test, lambda, B, data_test, fit_test)
msg <- paste0("true=", method, ", p=", p, ", mode=", mode, ", strategy=", strategy)
output <- paste0("selected lambda=", res_tst$lam, ", train_RMSE=", res_tst$train_RMSE,
", test_RMSE=", res_tst$test_RMSE)
print(msg)
print(output)
}
}
}
for (p in 1:3) {
l <- p / 2
kern <- data.frame(method = method, Sigma = 0, l = l, p = p)
kern$method <- as.character(kern$method)
data_all <- generate_data(200, label_names, method = method,
int_effect = int_effect, l = l,
p = p, eps = eps)
data_train <- data_all[1:100, ]
data_test <- data_all[101:200, ]
fit <- define_model(formula, label_names, data_train, kern)
fit_test <- define_model(formula, label_names, data_test, kern)
for (mode in c("AICc", "GCVc", "gmpml", "loocv")) {
for (strategy in c("avg", "exp", "erm")) {
res_tst <-
testing(formula_int, label_names,
fit$Y, fit$X1, fit$X2,
fit$kern_list, mode, strategy,
beta, test, lambda, B, data_test, fit_test)
msg <- paste0("true=", method, ", p=", p, ", mode=", mode, ", strategy=", strategy)
output <- paste0("selected lambda=", round(log(res_tst$lam), 2),
", train_RMSE=", round(res_tst$train_RMSE, 4),
", test_RMSE=", round(res_tst$test_RMSE, 4))
print(msg)
print(output)
}
}
}
A <- matrix(1:9, nrow = 3)
A
diag(3) - A
diag(diag(3) - A)
(1:3)/diag(diag(3) - A)
setwd('/Users/dorabeedeng/Desktop/KMR0903')
# generate command setting table
setting_total1 <-
expand.grid(n = 100,
method = c("polynomial", "rbf"),
p = 1:3,
int_effect = seq(0, 1, .1),
mode = c("AICc", "GCVc", "gmpml", "loocv"),
strategy = c("avg", "exp", "erm"),
beta = "min",
d = 1:5)
setting_total1$l <- setting_total1$p / 2
setting_total1 <- setting_total1[, c(1:3, 9, 4:8)]
setting_total2 <-
expand.grid(n = 100,
method = c("matern"),
p = 1:2, l = c(.5, 1, 1.5),
int_effect = seq(0, 1, .1),
mode = c("AICc", "GCVc", "gmpml", "loocv"),
strategy = c("avg", "exp", "erm"),
beta = "min",
d = 1:5)
setting_total <- rbind(setting_total1, setting_total2)
write.table(setting_total, "settings.txt",
sep = ",", row.names = FALSE)
# remove previous bash script
file_handle <- "command_exec"
file_names <-
grep(file_handle, list.files(), value = TRUE)
file_names_bkp <-
paste0("./", file_names)
for (name in c(file_names, file_names_bkp)){
file.remove(name)
}
# generate cluster bash script
n_run_per_worker <- 1
n_exec <-
ceiling(nrow(setting_total) / (n_run_per_worker * 1e3))
cluster_type <- c("SLURM", "LSF")[1]
for (exec_id in 1:n_exec) {
n_rask_rest <-
min(nrow(setting_total)/n_run_per_worker -
(exec_id-1)*1e3, 1e3)
if (cluster_type == "SLURM"){
string <-
paste0(
"#!/bin/bash
#SBATCH --array=", (exec_id-1) * 1e3 + 1,
"-", (exec_id-1) * 1e3 + n_rask_rest,
"	    		#job array list goes 1,2,3...n
#SBATCH -c 1
#SBATCH -N 1
#SBATCH -t 0-12:00			#job run 12 hour
#SBATCH -p short			#submit to 'short' queue
#SBATCH --mem=6370  		# use 4 GB memory
#SBATCH -e wd45_%j.err
#SBATCH --mail-type=END      #Type of email notification
#SBATCH --mail-user=wdeng@hsph.harvard.edu
Rscript './simMaster.R' ${SLURM_ARRAY_TASK_ID}"
)
} else if (cluster_type == "LSF"){
string <-
paste0(
"#!/bin/bash
#BSUB -q short					#submit to 'short' queue
#BSUB -n 1						#each  job run on 1 core
#BSUB -W 12:00					#job run 12 hour
#BSUB -J jobArray[", (exec_id-1) * 1e3 + 1,
"-", (exec_id-1) * 1e3 + n_rask_rest,
"]		#job array list goes 1,2,3...n
#BSUB -o './log/out_%I.txt' 			#lsf output file
#BSUB -e './log/err_%I.txt' 			#lsf error file
#BSUB -R 'rusage[mem=4096]'		#use 4GB memory
Rscript './simMaster.R' $LSB_JOBINDEX"
)
}
write(string, file = paste0("command_exec", exec_id, ".sh"))
write(string, file = paste0("./command_exec", exec_id, ".sh"))
}
A <- matrix(1:4, nrow = 2)
B <- matrix(2:5, nrow = 2)
A %*% B / 2
(A %*% B) / 2
A %*% (B / 2)
A %*% B / 1:2
(A %*% B) / 1:2
A %*% (B / 1:2)
B
(B / 1:2)
2:4 / 1:2
3:4 / 1:2
